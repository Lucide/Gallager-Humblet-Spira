@article{10.1145/357195.357200,
    author = {Gallager, R. G. and Humblet, P. A. and Spira, P. M.},
    title = {A Distributed Algorithm for Minimum-Weight Spanning Trees},
    year = {1983},
    issue_date = {Jan. 1983},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {5},
    number = {1},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/357195.357200},
    doi = {10.1145/357195.357200},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = {jan},
    pages = {66–77},
    numpages = {12}
}

@article{doi:10.1287/trsc.21.2.115,
    author = {Berman, Oded and Handler, Gabriel Y.},
    title = {Optimal Minimax Path of a Single Service Unit on a Network to Nonservice Destinations},
    journal = {Transportation Science},
    volume = {21},
    number = {2},
    pages = {115-122},
    year = {1987},
    doi = {10.1287/trsc.21.2.115},
    URL = {https://doi.org/10.1287/trsc.21.2.115},
    eprint = {https://doi.org/10.1287/trsc.21.2.115},
    abstract = { In this paper we consider the problem of finding an optimal path of a single service unit that travels toward a “nonservice” destination. Two types of objective functions are examined. One objective function is the minimization of the maximum distance (or weighted distance) between the moving service unit and any demand (node) of the network. The second objective function is the minimization of the total time period that the distance (or weighted distance) between the moving service unit and any node exceeds a response time threshold λ. For these two objective functions, we present algorithms which can be calculated, respectively, in 0(n3) and 0(n3 log n) elementary operations. }
}

@book{Stenman_2017,
    title={The BEAM Book},
    url={https://github.com/happi/theBeamBook#the-beam-book},
    publisher={Erik Stenman},
    author={Stenman, Erik},
    year={2023}
}

@article{10.5555/1756006.1756039,
    author = {Leskovec, Jure and Chakrabarti, Deepayan and Kleinberg, Jon and Faloutsos, Christos and Ghahramani, Zoubin},
    title = {Kronecker Graphs: An Approach to Modeling Networks},
    year = {2010},
    issue_date = {3/1/2010},
    publisher = {JMLR.org},
    volume = {11},
    issn = {1532-4435},
    abstract = {How can we generate realistic networks? In addition, how can we do so with a mathematically tractable model that allows for rigorous analysis of network properties? Real networks exhibit a long list of surprising properties: Heavy tails for the in- and out-degree distribution, heavy tails for the eigenvalues and eigenvectors, small diameters, and densification and shrinking diameters over time. Current network models and generators either fail to match several of the above properties, are complicated to analyze mathematically, or both. Here we propose a generative model for networks that is both mathematically tractable and can generate networks that have all the above mentioned structural properties. Our main idea here is to use a non-standard matrix operation, the Kronecker product, to generate graphs which we refer to as "Kronecker graphs".First, we show that Kronecker graphs naturally obey common network properties. In fact, we rigorously prove that they do so. We also provide empirical evidence showing that Kronecker graphs can effectively model the structure of real networks.We then present KRONFIT, a fast and scalable algorithm for fitting the Kronecker graph generation model to large real networks. A naive approach to fitting would take super-exponential time. In contrast, KRONFIT takes linear time, by exploiting the structure of Kronecker matrix multiplication and by using statistical simulation techniques.Experiments on a wide range of large real and synthetic networks show that KRONFIT finds accurate parameters that very well mimic the properties of target networks. In fact, using just four parameters we can accurately model several aspects of global network structure. Once fitted, the model parameters can be used to gain insights about the network structure, and the resulting synthetic graphs can be used for null-models, anonymization, extrapolations, and graph summarization.},
    journal = {J. Mach. Learn. Res.},
    month = {mar},
    pages = {985–1042},
    numpages = {58}
}

@inproceedings{10.5555/1624775.1624804,
    author = {Hewitt, Carl and Bishop, Peter and Steiger, Richard},
    title = {A Universal Modular ACTOR Formalism for Artificial Intelligence},
    year = {1973},
    publisher = {Morgan Kaufmann Publishers Inc.},
    address = {San Francisco, CA, USA},
    abstract = {This paper proposes a modular ACTOR architecture and definitional method for artificial intelligence that is conceptually based on a single kind of object: actors [or, if you will, virtual processors, activation frames, or streams]. The formalism makes no presuppositions about the representation of primitive data structures and control structures. Such structures can be programmed, micro-coded, or hard wired in a uniform modular fashion. In fact it is impossible to determine whether a given object is "really" represented as a list, a vector, a hash table, a function, or a process. The architecture will efficiently run the coming generation of PLANNER-like artificial intelligence languages including those requiring a high degree of parallelism. The efficiency is gained without loss of programming generality because it only makes certain actors more efficient; it does not change their behavioral characteristics. The architecture is general with respect to control structure and does not have or need goto, interrupt, or semaphore primitives. The formalism achieves the goals that the disallowed constructs are intended to achieve by other more structured methods.},
    booktitle = {Proceedings of the 3rd International Joint Conference on Artificial Intelligence},
    pages = {235–245},
    numpages = {11},
    location = {Stanford, USA},
    series = {IJCAI'73}
}

@book{10.5555/578775,
    author = {Aho, Alfred V. and Hopcroft, John E.},
    title = {The  Design and Analysis of Computer Algorithms},
    year = {1974},
    isbn = {0201000296},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {USA},
    edition = {1st},
    abstract = {From the Publisher: With this text, you gain an understanding of the fundamental concepts of algorithms, the very heart of computer science. It introduces the basic data structures and programming techniques often used in efficient algorithms. Covers use of lists, push-down stacks, queues, trees, and graphs. Later chapters go into sorting, searching and graphing algorithms, the string-matching algorithms, and the Schonhage-Strassen integer-multiplication algorithm. Provides numerous graded exercises at the end of each chapter. 0201000296B04062001}
}

@article{10.1145/564585.564601,
    author = {Gilbert, Seth and Lynch, Nancy},
    title = {Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services},
    year = {2002},
    issue_date = {June 2002},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {33},
    number = {2},
    issn = {0163-5700},
    url = {https://doi.org/10.1145/564585.564601},
    doi = {10.1145/564585.564601},
    abstract = {When designing distributed web services, there are three properties that are commonly desired: consistency, availability, and partition tolerance. It is impossible to achieve all three. In this note, we prove this conjecture in the asynchronous network model, and then discuss solutions to this dilemma in the partially synchronous model.},
    journal = {SIGACT News},
    month = {jun},
    pages = {51–59},
    numpages = {9}
}

@article{10.1145/7531.7919,
    author = {Frederickson, Greg N. and Lynch, Nancy A.},
    title = {Electing a Leader in a Synchronous Ring},
    year = {1987},
    issue_date = {Jan. 1987},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {34},
    number = {1},
    issn = {0004-5411},
    url = {https://doi.org/10.1145/7531.7919},
    doi = {10.1145/7531.7919},
    abstract = {The problem of electing a leader in a synchronous ring of n processors is considered. Both positive and negative results are obtained. On the one hand, if processor IDS are chosen from some countable set, then there is an algorithm that uses only O(n) messages in the worst case. On the other hand, any algorithm that is restricted to use only comparisons of IDs requires Ω(n log n) messages in the worst case. Alternatively, if the number of rounds is required to be bounded by some t in the worst case, and IDs are chosen from any set having at least undefined(n, t) elements, for a certain very fast-growing function undefined, then any algorithm requires Ω(n log n) messages in the worst case.},
    journal = {J. ACM},
    month = {jan},
    pages = {98–115},
    numpages = {18}
}

@inbook{Wattenhofer_2020,
    place={Zurich, Switzerland},
    title={Leader Election},
    booktitle={Principles of Distributed Computing},
    publisher={Distributed Computing Group},
    author={Wattenhofer, Roger},
    year={2020},
    pages={23–31}
}

@article{10.1145/359545.359563,
    author = {Lamport, Leslie},
    title = {Time, Clocks, and the Ordering of Events in a Distributed System},
    year = {1978},
    issue_date = {July 1978},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {21},
    number = {7},
    issn = {0001-0782},
    url = {https://doi.org/10.1145/359545.359563},
    doi = {10.1145/359545.359563},
    abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
    journal = {Commun. ACM},
    month = {jul},
    pages = {558–565},
    numpages = {8},
    keywords = {distributed systems, clock synchronization, multiprocess systems, computer networks}
}